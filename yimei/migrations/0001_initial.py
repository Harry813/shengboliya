# Generated by Django 3.2 on 2021-06-24 05:06

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User_Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(blank=True, max_length=10, null=True, verbose_name='名')),
                ('last_name', models.CharField(blank=True, max_length=10, null=True, verbose_name='姓')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='邮箱地址')),
                ('nick', models.CharField(blank=True, default='', max_length=50, null=True, verbose_name='昵称')),
                ('tele', models.CharField(blank=True, max_length=11, null=True, verbose_name='手机')),
                ('inv_code', models.CharField(editable=False, max_length=20, unique=True, verbose_name='邀请码')),
                ('vip_lv', models.PositiveSmallIntegerField(default=0, verbose_name='VIP等级')),
                ('id_card', models.CharField(blank=True, max_length=18, null=True, unique=True, verbose_name='身份证号码')),
                ('total', models.DecimalField(decimal_places=2, default=0, max_digits=9, verbose_name='总收入')),
                ('available', models.DecimalField(decimal_places=2, default=0, max_digits=9, verbose_name='可提现')),
                ('today', models.DecimalField(decimal_places=2, default=0, max_digits=9, verbose_name='今日收入')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('inv_user', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='邀请者')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Doctors',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Hospitals',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=50, verbose_name='医院名称')),
                ('address', models.CharField(blank=True, help_text='- 至多150字符', max_length=150, null=True, verbose_name='地址栏')),
                ('tele', models.CharField(blank=True, max_length=11, null=True, verbose_name='联系电话')),
            ],
        ),
        migrations.CreateModel(
            name='Transactions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Wiki_Category',
            fields=[
                ('code', models.CharField(blank=True, max_length=10, primary_key=True, serialize=False, verbose_name='类目编码')),
                ('name', models.CharField(max_length=30, verbose_name='类目名称')),
                ('father', models.ForeignKey(blank=True, limit_choices_to={'father__isnull': True}, null=True, on_delete=django.db.models.deletion.CASCADE, to='yimei.wiki_category', verbose_name='类目父类')),
            ],
        ),
        migrations.CreateModel(
            name='Wiki_Item',
            fields=[
                ('code', models.CharField(max_length=10, primary_key=True, serialize=False, verbose_name='项目编码')),
                ('name', models.CharField(max_length=30, verbose_name='项目名称')),
                ('description', models.TextField(blank=True, null=True, verbose_name='项目简介')),
                ('pros', models.TextField(blank=True, null=True, verbose_name='项目优点')),
                ('cons', models.TextField(blank=True, null=True, verbose_name='项目缺点')),
                ('method', models.TextField(blank=True, null=True, verbose_name='治疗方法')),
                ('effect', models.TextField(blank=True, null=True, verbose_name='治疗效果')),
                ('precautions', models.TextField(blank=True, null=True, verbose_name='注意事项')),
                ('patient', models.TextField(blank=True, null=True, verbose_name='适合人群')),
                ('attention', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)], verbose_name='关注度')),
                ('secure', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)], verbose_name='安全度')),
                ('duration', models.CharField(blank=True, max_length=50, null=True, verbose_name='治疗时长')),
                ('last', models.CharField(blank=True, max_length=50, null=True, verbose_name='效果持续')),
                ('recover', models.CharField(blank=True, max_length=50, null=True, verbose_name='恢复时间')),
                ('anesthesia', models.CharField(blank=True, max_length=50, null=True, verbose_name='麻醉方式')),
                ('period', models.CharField(blank=True, max_length=50, null=True, verbose_name='治疗周期')),
                ('operator', models.CharField(blank=True, max_length=50, null=True, verbose_name='操作人员资质')),
                ('opermethod', models.CharField(blank=True, max_length=50, null=True, verbose_name='操作方式')),
                ('pain', models.CharField(blank=True, max_length=50, null=True, verbose_name='疼痛感')),
                ('price', models.CharField(blank=True, max_length=50, null=True, verbose_name='价格')),
                ('category', models.ForeignKey(limit_choices_to={'father__isnull': False}, on_delete=django.db.models.deletion.CASCADE, to='yimei.wiki_category', verbose_name='类别')),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('code', models.CharField(max_length=6, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('level', models.IntegerField()),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='yimei.location')),
            ],
            options={
                'verbose_name': '地域',
                'verbose_name_plural': '地域',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=10, verbose_name='顾客姓名')),
                ('appoint_date', models.DateField(verbose_name='预约日期')),
                ('appoint_time', models.TimeField(verbose_name='预约时间')),
                ('status', models.CharField(choices=[('SUBMIT', '已提交申请'), ('ACCEPT', '已接受申请'), ('PRCESS', '申请处理中'), ('REJECT', '已拒绝申请'), ('SUCESS', '预约成功！'), ('FAILED', '预约失败！')], default='SUBMIT', max_length=10, verbose_name='预约状态')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('create_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='申请人')),
                ('hospital', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='yimei.hospitals', verbose_name='医院名称')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='yimei.wiki_item', verbose_name='项目名称')),
            ],
        ),
        migrations.AddField(
            model_name='user_profile',
            name='loca',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='yimei.location', verbose_name='区域'),
        ),
        migrations.AddField(
            model_name='user_profile',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
